From 02211d49f1ff7022376fdc304f23c27be2dbd73b Mon Sep 17 00:00:00 2001
From: Emmanuele Bassi <ebassi@gnome.org>
Date: Fri, 21 Nov 2014 11:12:07 +0100
Subject: [PATCH] build: Add a "configure" script implementing the GNOME Build
 API

Original patch from: Debarshi Ray <debarshir@gnome.org>

v2:
  - Fix whitespace issues
  - Add -GNinja switch

v3:
  - Generate a Makefile wrapper for Ninja

v4:
  - Add default paths

See https://github.com/cgwalters/build-api
---
 configure | 100 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 100 insertions(+)
 create mode 100755 configure

diff --git a/configure b/configure
new file mode 100755
index 0000000..8b062f7
--- /dev/null
+++ b/configure
@@ -0,0 +1,100 @@
+#!/bin/bash
+# configure script adapter for cmake
+# Copyright 2010, 2011, 2013 Colin Walters <walters@verbum.org>
+# Copyright 2014 Debarshi Ray <debarshir@gnome.org>
+# Copyright 2017 Emmanuele Bassi <ebassi@gnome.org>
+# Licensed under the new-BSD license (http://www.opensource.org/licenses/bsd-license.php)
+
+prefix=/usr
+
+# Little helper function for reading args from the commandline.
+# it automatically handles -a b and -a=b variants, and returns 1 if
+# we need to shift $3.
+read_arg() {
+    # $1 = arg name
+    # $2 = arg value
+    # $3 = arg parameter
+    local rematch='^[^=]*=(.*)$'
+    if [[ $2 =~ $rematch ]]; then
+        read "$1" <<< "${BASH_REMATCH[1]}"
+    else
+        read "$1" <<< "$3"
+        # There is no way to shift our callers args, so
+        # return 1 to indicate they should do it instead.
+        return 1
+    fi
+}
+
+sanitycheck() {
+    # $1 = arg name
+    # $1 = arg command
+    # $2 = arg alternates
+    local cmd=$( which $2 2>/dev/null )
+    if [ -x "$cmd" ]; then
+        read "$1" <<< "$cmd"
+        return 0
+    fi
+    test -z $3 || {
+        for alt in $3; do
+            cmd=$( which $alt 2>/dev/null )
+            if [ -x "$cmd" ]; then
+                read "$1" <<< "$cmd"
+                return 0
+            fi
+        done
+    }
+    echo -e "\e[1;31mERROR\e[0m: Command '$2' not found"
+    exit 1
+}
+
+sanitycheck NINJA 'ninja' 'ninja-build'
+
+while (($# > 0)); do
+    case "${1%%=*}" in
+        --prefix) read_arg prefix "$@" || shift;;
+        --bindir) read_arg bindir "$@" || shift;;
+        --sbindir) read_arg sbindir "$@" || shift;;
+        --libexecdir) read_arg libexecdir "$@" || shift;;
+        --datarootdir) read_arg datarootdir "$@" || shift;;
+        --datadir) read_arg datadir "$@" || shift;;
+        --sysconfdir) read_arg sysconfdir "$@" || shift;;
+        --libdir) read_arg libdir "$@" || shift;;
+        --mandir) read_arg mandir "$@" || shift;;
+        --includedir) read_arg includedir "$@" || shift;;
+        *) echo "Ignoring unknown option '$1'";;
+    esac
+    shift
+done
+
+test -z ${prefix} && prefix=/usr
+test -z ${libdir} && libdir=${prefix}/lib
+test -z ${datarootdir} && datarootdir=${prefix}/share
+test -z ${datadir} && datadir=${datarootdir}
+test -z ${libexecdir} && libexecdir=${prefix}/libexec
+test -z ${sysconfdir} && sysconfdir=${prefix}/etc
+test -z ${mandir} && mandir=${datadir}/man
+test -z ${bindir} && bindir=${prefix}/bin
+test -z ${sbindir} && sbindir=${prefix}/sbin
+test -z ${includedir} && includedir=${prefix}/include
+
+srcdir=$(dirname $0)
+
+cat > Makefile <<END
+# Generated by configure; do not edit
+
+all:
+	${NINJA}
+
+install:
+	DESTDIR="\$(DESTDIR)" ${NINJA} install
+END
+
+exec cmake \
+     -DCMAKE_BUILD_TYPE=Release \
+     -DCMAKE_INSTALL_PREFIX:PATH=${prefix} \
+     -DOPENJPEG_INSTALL_BIN_DIR:PATH=${bindir} \
+     -DOPENJPEG_INSTALL_LIB_DIR:PATH=${libdir} \
+     -DOPENJPEG_INSTALL_INCLUDE_DIR:PATH=${includedir} \
+     -DOPENJPEG_INSTALL_DATA_DIR:PATH=${datadir} \
+     -GNinja \
+     ${srcdir}
-- 
2.14.3

