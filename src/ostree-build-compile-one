#!/usr/bin/env python
# Copyright (C) 2011,2012 Colin Walters <walters@verbum.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# ostbuild-compile-one-make wraps systems that implement the GNOME build API:
# http://people.gnome.org/~walters/docs/build-api.txt

import os,sys,stat,subprocess,tempfile,re,shutil
from StringIO import StringIO
import json
from multiprocessing import cpu_count
import select,time

def log(x):
    sys.stdout.write('ob: ' + x)
    sys.stdout.write('\n')
    sys.stdout.flush()

def fatal(x):
    log(x)
    sys.exit(1)

def _get_env_for_cwd(cwd=None, env=None):
    # This dance is necessary because we want to keep the PWD
    # environment variable up to date.  Not doing so is a recipie
    # for triggering edge conditions in pwd lookup.
    if (cwd is not None) and (env is None or ('PWD' in env)):
        if env is None:
            env_copy = os.environ.copy()
        else:
            env_copy = env.copy()
        if ('PWD' in env_copy) and (not cwd.startswith('/')):
            env_copy['PWD'] = os.path.join(env_copy['PWD'], cwd)
        else:
            env_copy['PWD'] = cwd
    else:
        env_copy = env
    return env_copy

def run_sync(args, cwd=None, env=None):
    log("running: %s" % (subprocess.list2cmdline(args),))

    env_copy = _get_env_for_cwd(cwd, env)

    stdin_target = open('/dev/null', 'r')
    stdout_target = sys.stdout
    stderr_target = sys.stderr

    proc = subprocess.Popen(args, stdin=stdin_target, stdout=stdout_target, stderr=stderr_target,
                            close_fds=True, cwd=cwd, env=env_copy)
    stdin_target.close()
    returncode = proc.wait()
    if returncode != 0:
        logfn = fatal
    else:
        logfn = None
    if logfn is not None:
        logfn("pid %d exited with code %d" % (proc.pid, returncode))
    return returncode

PREFIX = '/usr'

def _has_buildapi_configure_variable(name):
    var = '#buildapi-variable-%s' % (name, )
    for line in open('configure'):
        if line.find(var) >= 0:
            return True
    return False

def main(args):
    ncpus = cpu_count()
    default_buildapi_jobs = ['-j', '%d' % (ncpus + 1), 
                             '-l', '%d' % (ncpus * 2)]

    starttime = time.time()
    
    uname=os.uname()
    kernel=uname[0].lower()
    machine=uname[4]
    build_target='%s-%s' % (machine, kernel)

    default_configargs = [
        '--prefix=' + PREFIX,
        '--libdir=' + os.path.join(PREFIX, 'lib'),
        '--sysconfdir=/etc',
        '--localstatedir=/var',
        '--bindir=' + os.path.join(PREFIX, 'bin'),
        '--sbindir=' + os.path.join(PREFIX, 'bin'),
        '--datadir=' + os.path.join(PREFIX, 'share'),
        '--includedir=' + os.path.join(PREFIX, 'include'),
        '--libexecdir=' + os.path.join(PREFIX, 'libexec'),
        '--mandir=' + os.path.join(PREFIX, 'share', 'man'),
        '--infodir=' + os.path.join(PREFIX, 'share', 'info'),
    ]

    autotools_configargs = [
        '--build=' + build_target,
        '--disable-static',
        '--disable-silent-rules',
    ]
    meson_configargs = []

    makeargs = ['make']
    ninjaargs = ['ninja']

    ostbuild_resultdir='_ostbuild-results'
    ostbuild_meta_path='_ostbuild-meta.json'

    chdir = None
    opt_install = False

    for arg in args:
        if arg.startswith('--ostbuild-resultdir='):
            ostbuild_resultdir=arg[len('--ostbuild-resultdir='):]
        elif arg.startswith('--ostbuild-meta='):
            ostbuild_meta_path=arg[len('--ostbuild-meta='):]
        elif arg.startswith('--chdir='):
            os.chdir(arg[len('--chdir='):])
        else:
            makeargs.append(arg)
        
    f = open(ostbuild_meta_path)
    metadata = json.load(f)
    f.close()

    configargs = metadata.get('config-opts', [])

    requires = metadata.get('requires', {})
    pkgconfig_requires = requires.get('pkgconfig', [])
    if pkgconfig_requires:
        for req in pkgconfig_requires:
            run_sync(['pkg-config', '--exists', req])

    if metadata.get('rm-configure', False):
        configure_path = 'configure'
        if os.path.exists(configure_path):
            os.unlink(configure_path)

    force_autotools = metadata.get('force-autotools', False)

    builddir = '_build'
    use_builddir = True

    meson_build = False
    if os.path.exists('meson.build') and not force_autotools:
        meson_build = True
    else:
        autogen_script = None
        if not os.path.exists('configure'):
            log("No 'configure' script found, looking for autogen/bootstrap")
            for name in ['autogen', 'autogen.sh', 'bootstrap']:
                if os.path.exists(name):
                    log("Using bootstrap script '%s'" % (name, ))
                    autogen_script = name
            if autogen_script is None:
                fatal("No configure or autogen script detected; unknown buildsystem")

        if autogen_script is not None:
            env = dict(os.environ)
            env['NOCONFIGURE'] = '1'
            run_sync(['./' + autogen_script], env=env)
        else:
            log("Using existing 'configure' script")

        doesnot_support_builddir = _has_buildapi_configure_variable('no-builddir')
        if doesnot_support_builddir:
            log("Found no-builddir Build API variable; copying source tree to _build")
        if os.path.isdir('_build'):
            shutil.rmtree('_build')
        shutil.copytree('.', '_build', symlinks=True,
                        ignore=shutil.ignore_patterns('_build'))
        use_builddir = False
    
    if use_builddir:
        log("Using build directory %r" % (builddir, ))
        if not os.path.isdir(builddir):
            os.mkdir(builddir)

    if meson_build:
        args = ['meson']
        args.extend(meson_configargs)
        args.extend(default_configargs)
        args.extend(configargs)
        args.extend(['..'])
    else:
        config_status = os.path.join(builddir, 'config.status')
        have_config_status = os.path.exists(config_status)
            
        if not have_config_status:
            if use_builddir:
                args = ['../configure']
            else:
                args = ['./configure']
        args.extend(autotools_configargs)
        args.extend(default_configargs)
        args.extend(configargs)

    run_sync(args, cwd=builddir)

    use_make = False
    use_ninja = False

    buildfile_path = None

    for name in ['build.ninja']:
        file_path = os.path.join(builddir, name)
        if os.path.exists(file_path):
            buildfile_path = file_path
            use_ninja = True
            break

    for name in ['Makefile', 'makefile', 'GNUmakefile']:
        file_path = os.path.join(builddir, name)
        if os.path.exists(file_path):
            buildfile_path = file_path
            use_make = True
            break

    if buildfile_path is None:
        fatal("No build rules file found")

    if use_make:
        args = list(makeargs)
        env = os.environ.copy()
    else:
        # While make supports passing variables using something like
        # `make CC=foo`, ninja uses environment variables; this means
        # we need to move make variables into the environment before
        # calling ninja
        args = list(ninjaargs)
        env = os.environ.copy()
        if 'CC' in makeargs:
            env['CC'] = makeargs['CC']
        if 'CXX' in makeargs:
            env['CXX'] = makeargs['CXX']
        log("CC = '%s', CXX = '%s'" % (env['CC'], env['CXX'],))

    user_specified_jobs = False
    for arg in args:
        if arg == '-j':
            user_specified_jobs = True
    
    if not user_specified_jobs and use_make:
        has_notparallel = False
        for line in open(buildfile_path):
            if line.startswith('.NOTPARALLEL'):
                has_notparallel = True
                log("Found .NOTPARALLEL")

        if not has_notparallel:
            log("Didn't find NOTPARALLEL, using parallel make by default")
            args.extend(default_buildapi_jobs)

    run_sync(args, cwd=builddir, env=env)

    if use_make:
        args = ['make', 'install', 'DESTDIR=' + ostbuild_resultdir]
        env = os.environ.copy()
    else:
        args = ['ninja', 'install']
        env = os.environ.copy()
        env['DESTDIR'] = ostbuild_resultdir

    run_sync(args, cwd=builddir, env=env)

    endtime = time.time()

    log("Compilation succeeded; %d seconds elapsed" % (int(endtime - starttime),))
    log("Results placed in %s" % (ostbuild_resultdir, ))

main(sys.argv[1:])
